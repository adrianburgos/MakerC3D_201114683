package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER, IGUALIGUAL, DIFERENTE, MENOR, MAYOR, MENORIGUAL, MAYORIGUAL, Y, O, NO;
nonterminal NodoC3D inicial, expresion, relacional, logica, oprel;

precedence left O;
precedence left Y;
precedence left NO;
precedence left MAYORIGUAL,MENORIGUAL, MAYOR, MENOR, IGUALIGUAL, DIFERENTE;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT;

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} logica:log
                {: 
                    RESULT = log;
                    ControlC3D.agregarC3D("//Ãšltimo valor: " + log.getCad());
                :};

logica      ::= logica:izq Y logica:der
                {: 
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + izq.getCad() + " && " + der.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp); 
                :}
            |   logica:izq O logica:der
                {: 
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + izq.getCad() + " || " + der.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp); 
                :}
            |   NO logica:log
                {: 
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = ! " + log.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp); 
                :}
            |   relacional:rel {: RESULT = rel; :};

relacional  ::= expresion:izq oprel:op expresion:der
                {: 
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + izq.getCad() + " " + op.getCad() + " " + der.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp); 
                :}
            |   expresion:exp {: RESULT = exp; :};

oprel       ::= IGUALIGUAL {: RESULT = new NodoC3D("=="); :}
            |   DIFERENTE {: RESULT = new NodoC3D("!="); :}
            |   MENOR {: RESULT = new NodoC3D("<"); :}
            |   MAYOR {: RESULT = new NodoC3D(">"); :}
            |   MENORIGUAL {: RESULT = new NodoC3D("<="); :}
            |   MAYORIGUAL {: RESULT = new NodoC3D(">="); :};

expresion   ::= expresion:izq MAS expresion:der
                {: 
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp); 
                :}
            |   expresion:izq MENOS expresion:der
                {: 
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp); 
                :}
            |   expresion:izq MULT expresion:der
                {: 
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp); 
                :}
            |   expresion:izq DIV expresion:der
                {: 
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp); 
                :}
            |   expresion:izq POT expresion:der
                {: 
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp); 
                :}
            |   MENOS expresion:exp 
                {: 
                    String temp = ControlC3D.generaTemp();
                    String c3d = temp + " = - " + exp.getCad() + ";\n";
                    ControlC3D.agregarC3D(c3d);
                    RESULT = new NodoC3D(temp); 
                :}
            |   PAR_IZQ logica:log PAR_DER {: RESULT = log; :}
            |   ID:id {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal {: RESULT = new NodoC3D(decimal); :};